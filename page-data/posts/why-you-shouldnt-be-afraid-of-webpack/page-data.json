{"componentChunkName":"component---src-templates-blog-page-template-js","path":"/posts/why-you-shouldnt-be-afraid-of-webpack","result":{"data":{"contentfulPost":{"content":{"childMarkdownRemark":{"html":"<h2>Introduction</h2>\n<p>Trying to be kinda active in community, I started participating in lots of programming meetups in my city - some, where I felt like a junior (someone, who I even not am), and some other where I felt like a very expirienced se√±or developer. Regardless the level, I always could find at least one person, who when heared word 'webpack', shown discouragement.</p>\n<p>As a programmer, I have some programming friends. When coming back home with one of them, I proudly said, that I've created my React-TypeScript-Node-SSR project, and created my own webpack config for it. You could guess his reaction - \"Wait, your own webpack config? Respect man\".</p>\n<p>And his reaction brought me to write this article - tons of people think about webpack, as a tool to which you paste config from medium (or another tutorial), and I does something with your code, that makes it somewhat compatible with the browser. And that's wrong - webpack is an amazing tool, that anyone configure in a moment, and use it to bundle the code and modules installed with npm in almost any JavaScript project.</p>\n<h2>Basic usage</h2>\n<p>So, let's get our hands dirty, and jump into code. The basic configuration of webpack is:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// nothing</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Yes, you don't even need a config, to start working with webpack. It will still provide basic functionalities like importing modules from npm, another files in a project, and bundling that code. The only things you need is an appropiate file structure:</p>\n<ul>\n<li><code class=\"language-text\">src</code> directory for your source js files, in which there must be an <code class=\"language-text\">index.js</code> file</li>\n<li><code class=\"language-text\">dist</code> directory, where webpack will place the bundle - <code class=\"language-text\">main.js</code> file. Here you'll also place your index.html, which will have <code class=\"language-text\">&lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;</code>.</li>\n</ul>\n<p>And you need to have webpack installed (in global scope, or in project's devDependencies). Now just run <code class=\"language-text\">webpack</code> if you have it installed globally, or create a npm script, which does excatly the same, and you're ready to go. If you don't want to install it, you can always use npx, and run <code class=\"language-text\">npx webpack</code>.</p>\n<p>Running webpack without config is a nice solution if you just want to use a library like lodash in your project, but it offers a lot more, when you configure it a bit.</p>\n<h2>Writing a basic webpack config</h2>\n<p>Webpack uses a configuration, defined and exported in <code class=\"language-text\">webpack.config.js</code> file. It consists of some basic, required parts:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Input file directory</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Name of the js bundle</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Absolute path of directory, where all the bundled files will go</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Webpack with this config does exactly the same, that webpack without config would do. But we can spice it up. But first - let's talk about another important concept - loaders.</p>\n<h3>What is a loader?</h3>\n<p>When you import a file in your code, eg. <code class=\"language-text\">import { foo } from &#39;./bar.js&#39;</code>, webpack runs something which is called a loader. First, it detects what type of file is it dealing with (<code class=\"language-text\">.js</code>, <code class=\"language-text\">.ts</code> or any other file extension you can imagine), and runs a loader, which is assigned to this type of extension. Loaders can put the code from one file to another, compile it, copy files from one directory to the dist directory, inject some styles, parse some files, and do many other fthings. In the base form, webpack has only the loaders for <code class=\"language-text\">.js</code> and <code class=\"language-text\">.json</code> files, but by configuring it the right way, you can add some other.</p>\n<h3>Webpack config example - with loaders</h3>\n<p>Let's create a webpack config, that will allow us to import <code class=\"language-text\">.css</code> files, and use TypeScript!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'main.js'</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">// Define rules, for the loaders</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.css$/i</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// For .css files</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Use style-loader (which injects the styles into the webiste) and css-loader (which parses the css file, for use with style-loader)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.tsx?$/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// For .ts or .tsx files</span>\n        use<span class=\"token operator\">:</span> <span class=\"token string\">'ts-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Use .ts loader, which compiles TypeScript, and bundles it into the main.js file</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Don't compile files from node_modules, there's no need to do it, as all the libraries written in TypeScript are already compiled</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Allow TypeScript files to be imported without file extension - import { foo } from './bar'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To use webpack with TypeScript, you'll also need a basic <code class=\"language-text\">tsconfig.json</code> - TypeScript configuration</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Of course you'll also need to install required packages:\n<code class=\"language-text\">npm install typescript ts-loader style-loader css-loader --save-dev</code></p>\n<p>Now you're ready to go! You can write your code in TypeScript and import CSS directly in it (<code class=\"language-text\">import &#39;./styles.css&#39;</code>). You can also modify this code, to use <code class=\"language-text\">sass-loader</code> and be able to write styles in SASS, or any other loader you could imagine.</p>\n<h2>Developing the better way</h2>\n<p>When using webpack, you'll quickly notice, how annoying it is to need to build your code every time you make a small change - fortuneatly there are solutions, that make the development process simplier and more pleasant.</p>\n<p>First of them is watch mode - you run <code class=\"language-text\">webpack --watch</code>, and webpack will automatically listen to changes in source files and build them, so you won't need to manually trigger the builds. But there is even better solution - <code class=\"language-text\">webpack-dev-server</code>.</p>\n<p>webpack-dev-server listens to changes (like watch mode) and furthermore, hosts the files from selected directory. When the file changes, it also reloads the page in browser, so you don't need to do it manually. To use it, add this to config file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\">devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  contentBase<span class=\"token operator\">:</span> './dist'<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Install webpack-dev-server (<code class=\"language-text\">npm i webpack-dev-server --save-dev</code>), and instead of running <code class=\"language-text\">webpack</code> to build the files, in development use <code class=\"language-text\">webpack-dev-server</code> - it is recommended to add a npm script for that.</p>\n<h2>Summary</h2>\n<p>I hope that I clarified the webpack for you, and encouraged you to use it on a daily basis. Webpack is a very powerful tool, with which you can do almost anything you can imagine - from websites to npm packages. </p>"}},"title":"why you shouldn't be afraid of webpack","date":"2020-04-18T19:30+02:00","url":"/posts/why-you-shouldnt-be-afraid-of-webpack"}},"pageContext":{}},"staticQueryHashes":[]}